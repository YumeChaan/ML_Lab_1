# -*- coding: utf-8 -*-
"""Label1_ML_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzF2t-EYku4QJG2PjjhB7NanogDoFkp8
"""

import pandas as pd
import numpy as np

labels = ['label_1', 'label_2', 'label_3', 'label_4']
features = [f'feature_{i}' for i in range (1,257)]

train_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/files/train.csv')
train_df.shape

valid_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/files/valid.csv')
valid_df.shape

test_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/files/test.csv')
test_df.shape

from sklearn.preprocessing import StandardScaler

x_train = {}
y_train = {}

x_valid = {}
y_valid = {}

x_test = {}

for label in labels:
  tr_df = train_df[train_df['label_2'].notna()] if label == 'label_2' else train_df
  vl_df = valid_df
  tst_df = test_df

  scaler = StandardScaler()
  x_train[label] = pd.DataFrame(scaler.fit_transform(tr_df.drop(labels, axis = 1)), columns = features)
  y_train[label] = tr_df[label]

  x_valid[label] = pd.DataFrame(scaler.transform(vl_df.drop(labels, axis = 1)), columns = features)
  y_valid[label] = vl_df[label]

  x_test[label] = pd.DataFrame(scaler.transform(tst_df.drop(labels, axis = 1)), columns = features)

from sklearn import svm

clf = svm.SVC(kernel= 'linear')
clf.fit(x_train['label_1'], y_train['label_1'])

y_pred = clf.predict(x_valid['label_1'])

y_pred_test_before = clf.predict(x_test['label_1'])

from sklearn import metrics

print(metrics.confusion_matrix(y_valid['label_1'], y_pred))
print(metrics.accuracy_score(y_valid['label_1'], y_pred))
print(metrics.precision_score(y_valid['label_1'], y_pred, average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_pred, average='weighted'))

from sklearn.feature_selection import SelectKBest, f_classif

selector = SelectKBest(f_classif, k=130)
x_train_kBest = selector.fit_transform(x_train['label_1'], y_train['label_1'])
x_valid_kBest = selector.transform(x_valid['label_1'])
x_test_kBest = selector.transform(x_test['label_1'])
print (x_train_kBest.shape)
print (x_valid_kBest.shape)
print (x_test_kBest.shape)

clf = svm.SVC(kernel= 'linear')
clf.fit(x_train_kBest, y_train['label_1'])

y_pred = clf.predict(x_valid_kBest)
y_pred_test = clf.predict(x_test_kBest)
print(metrics.confusion_matrix(y_valid['label_1'], y_pred))
print(metrics.accuracy_score(y_valid['label_1'], y_pred))
print(metrics.precision_score(y_valid['label_1'], y_pred, average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_pred, average='weighted'))

from sklearn.decomposition import PCA

pca = PCA(n_components= 0.95, svd_solver='full')
pca.fit(x_train_kBest)
x_train_trf = pd.DataFrame(pca.transform(x_train_kBest))
x_valid_trf = pd.DataFrame(pca.transform(x_valid_kBest))
x_test_trf = pd.DataFrame(pca.transform(x_test_kBest))
print(x_train_trf.shape)
print(x_valid_trf.shape)
print(x_test_trf.shape)

clf = svm.SVC(kernel= 'linear')
clf.fit(x_train_trf, y_train['label_1'])

y_pred = clf.predict(x_valid_trf)
y_pred_test_after = clf.predict(x_test_trf)
print(metrics.confusion_matrix(y_valid['label_1'], y_pred))
print(metrics.accuracy_score(y_valid['label_1'], y_pred))
print(metrics.precision_score(y_valid['label_1'], y_pred, average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_pred, average='weighted'))

num_new_features = x_test_trf.shape[1]
print(num_new_features)

output_df = pd.DataFrame({
    'Predicted labels before feature engineering': y_pred_test_before,
    'Predicted labels after feature engineering': y_pred_test_after,
    'No. of new features': x_test_trf.shape[1]
})

output_df

for i in range(x_test_trf.shape[1]):
    output_df[f'new feature {i+1}'] = x_test_trf.iloc[:, i]
output_df

output_df.to_csv('/content/drive/MyDrive/Colab Notebooks/files/190377T_label_1.csv', index=False)
